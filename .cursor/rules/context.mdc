---
description: 
globs: 
alwaysApply: true
---
---
description: Project Context
globs: 
alwaysApply: true
---

## Tech  Stack
- **Next.js 15+** (App Router, TypeScript)
- **TailwindCSS** (fonts: Geist Sans/Mono)
- **MDX** content
- **Vercel** deploy w/ Analytics & Speed Insights

## Dependencies
- Latest wherever possible
- Current snapshot:

```
"dependencies": {
    "@tailwindcss/postcss": "^4.1.5",
    "@types/node": "^22.15.14",
    "@types/react": "^19.1.3",
    "@types/react-dom": "^19.1.3",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "geist": "^1.4.2",
    "next": "^15.3.1",
    "next-mdx-remote": "^5.0.0",
    "postcss": "^8.5.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "sugar-high": "^0.9.3",
    "tailwindcss": "^4.1.5",
    "typescript": "^5.8.3"
  }
```

## Project Layout
/app
  ├─ /components        # atomic, typed React components
  ├─ /journal          # MDX posts
  │  ├─ /posts         # MDX content files
  │  │  └─ *.mdx      # individual posts, filename used as route path
  │  ├─ /[slug]       # dynamic post routes
  │  │  └─ [page.tsx](mdc:app/journal/[slug]/page.tsx)     # individual posts, filename used as route path
  │  ├─ [page.tsx](mdc:app/journal/page.tsx)      # journal index
  │  └─ [utils.ts](mdc:app/journal/utils.ts)      # journal helpers
  ├─ /portfolio        # portfolio items
  ├─ /og              # OG‑image functions
  ├─ /rss             # RSS generation
  ├─ [layout.tsx](mdc:app/layout.tsx)       # root layout + metadata
  ├─ [page.tsx](mdc:app/page.tsx)         # home page
  ├─ [constants.ts](mdc:app/constants.ts)
  ├─ [utils.ts](mdc:app/utils.ts)
  └─ [global.css](mdc:app/global.css)
/vercel.json          # config + cron jobs

Please search the codebase as frequently as possible, especially if you don't have context.

## Coding Conventions
- Functional components, explicit prop types
- ESLint + Prettier enforced
- Tailwind utility classes; `dark:` variants for dark mode
- Mobile‑first responsive design
- Pure helpers, async/await, robust error handling
- Meaningful names; keep components & functions small
- Use semantic HTML, proper heading hierarchy & ARIA

## Performance & SEO
- Next.js Image for assets, code‑splitting, caching headers
- Metadata (title, desc, OG) in `constants.ts`
- robots.txt & sitemap.xml generated at build
- Monitor Core Web Vitals via Vercel Analytics

## Accessibility & Testing
- Ensure contrast, keyboard nav, screen‑reader labels
- Unit tests for components + a11y/SEO checks

## Git / CI / Security
- Conventional commits, small PRs, main = deployable
- Secrets via env vars; validate with Zod (or similar)
- Enforce CSP, CORS, rate limiting; deps kept current

## MDX Content
- Front‑matter fields: `title`, `date`, `description`, `tags`.  
- Display dates relatively (e.g. "3 days ago") but store ISO.

## Utilities
- Date helpers with locale support
- Re‑use typed nav items from `constants.ts`

## Vercel Cron Jobs (minimal rules)
- Declare in `vercel.json`  
  {
    "crons": [{ "path": "/api/cron", "schedule": "*/10 * * * *" }]
  }

- Cron syntax (UTC): `MIN HOUR DOM MON DOW`, ranges `0‑59 0‑23 1‑31 1‑12 0‑6`, no named values, DOM & DOW can't both be set.
- Invocation: Vercel issues HTTP GET to `path`, `User‑Agent: vercel-cron/1.0`
- Security (optional): set `CRON_SECRET`; Vercel adds `Authorization: Bearer <CRON_SECRET>`, verify in handler.
